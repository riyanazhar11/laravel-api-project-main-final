<?php

namespace App\Services;

use App\Models\User;
use App\Models\CompanyInvitation;
use App\Exceptions\UnauthorizedException;
use App\Exceptions\ResourceNotFoundException;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

class CompanyService
{
    /**
     * Invite employee to company
     */
    public function inviteEmployee(User $owner, array $data): CompanyInvitation
    {
        // Check if user already exists
        $existingUser = User::where('email', $data['email'])->first();
        if ($existingUser && $existingUser->company_id === $owner->company_id) {
            throw new UnauthorizedException('User is already an employee of this company');
        }

        // Check if invitation already exists and is pending
        $existingInvitation = CompanyInvitation::where('email', $data['email'])
            ->where('company_id', $owner->company_id)
            ->where('status', 'pending')
            ->where('expires_at', '>', now())
            ->first();

        if ($existingInvitation) {
            throw new UnauthorizedException('An invitation has already been sent to this email');
        }

        // Create invitation
        $invitation = CompanyInvitation::create([
            'company_id' => $owner->company_id,
            'email' => $data['email'],
            'name' => $data['name'],
            'invitation_token' => Str::random(64),
            'status' => 'pending',
            'expires_at' => now()->addDays(7),
        ]);

        // Send invitation email
        $this->sendInvitationEmail($invitation);

        return $invitation;
    }

    /**
     * Accept company invitation
     */
    public function acceptInvitation(string $token, ?string $password = null): array
    {
        $invitation = CompanyInvitation::where('invitation_token', $token)
            ->where('status', 'pending')
            ->where('expires_at', '>', now())
            ->first();

        if (!$invitation) {
            throw new ResourceNotFoundException('Invalid or expired invitation');
        }

        // Check if user already exists
        $existingUser = User::where('email', $invitation->email)->first();
        if ($existingUser) {
            throw new UnauthorizedException('A user with this email already exists');
        }

        // Generate password if not provided
        $isAutoGenerated = !$password;
        if ($isAutoGenerated) {
            $password = Str::random(12);
        }

        // Create the user
        $user = User::create([
            'name' => $invitation->name,
            'email' => $invitation->email,
            'password' => Hash::make($password),
            'company_id' => $invitation->company_id,
            'email_verified_at' => now(), // Auto-verify since they came through invitation
        ]);

        // Update invitation status
        $invitation->update(['status' => 'accepted']);

        // Generate API token for immediate login
        $user->update(['api_token' => Str::random(60)]);

        // Send credentials email if auto-generated password
        if ($isAutoGenerated) {
            $this->sendCredentialsEmail($user, $password);
        }

        return [
            'user' => $user,
            'password' => $password
        ];
    }

    /**
     * Remove employee from company
     */
    public function removeEmployee(User $owner, int $employeeId): void
    {
        $employee = User::where('company_id', $owner->company_id)
            ->where('id', $employeeId)
            ->where('id', '!=', $owner->id) // prevent deleting owner
            ->first();

        if (!$employee) {
            throw new ResourceNotFoundException('Employee not found');
        }

        $employee->delete();
    }

    /**
     * List pending invitations
     */
    public function listInvitations(User $owner): \Illuminate\Database\Eloquent\Collection
    {
        return CompanyInvitation::where('company_id', $owner->company_id)
            ->where('status', 'pending')
            ->where('expires_at', '>', now())
            ->get();
    }

    /**
     * Cancel invitation
     */
    public function cancelInvitation(User $owner, int $invitationId): void
    {
        $invitation = CompanyInvitation::where('id', $invitationId)
            ->where('company_id', $owner->company_id)
            ->where('status', 'pending')
            ->first();

        if (!$invitation) {
            throw new ResourceNotFoundException('Invitation not found');
        }

        $invitation->update(['status' => 'expired']);
    }

    /**
     * Send invitation email
     */
    private function sendInvitationEmail(CompanyInvitation $invitation): void
    {
        $acceptUrl = url("/api/accept-invitation/{$invitation->invitation_token}");
        
        Mail::send('emails.company_invitation', [
            'invitation' => $invitation,
            'acceptUrl' => $acceptUrl
        ], function ($message) use ($invitation) {
            $message->to($invitation->email);
            $message->subject('You\'ve been invited to join ' . $invitation->company->name);
        });
    }

    /**
     * Send credentials email
     */
    private function sendCredentialsEmail(User $user, string $password): void
    {
        Mail::send('emails.credentials', [
            'user' => $user,
            'password' => $password
        ], function ($message) use ($user) {
            $message->to($user->email);
            $message->subject('Your account has been created - Login Credentials');
        });
    }
}
